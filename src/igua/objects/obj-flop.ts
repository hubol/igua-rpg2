import { Graphics, Sprite } from "pixi.js";
import { objText } from "../../assets/fonts";
import { Sfx } from "../../assets/sounds";
import { Tx } from "../../assets/textures";
import { interp, interpvr } from "../../lib/game-engine/routines/interp";
import { sleep, sleepf } from "../../lib/game-engine/routines/sleep";
import { approachLinear, cyclic } from "../../lib/math/number";
import { Integer, PolarInt } from "../../lib/math/number-alias-types";
import { PseudoRng } from "../../lib/math/rng";
import { AdjustColor } from "../../lib/pixi/adjust-color";
import { container } from "../../lib/pixi/container";
import { MapRgbFilter } from "../../lib/pixi/filters/map-rgb-filter";
import { scene } from "../globals";
import { GenerativeMusicUtils } from "../lib/generative-music-utils";
import { mxnCollectibleLoot } from "../mixins/mxn-collectible-loot";
import { mxnPhysics } from "../mixins/mxn-physics";
import { mxnRescue } from "../mixins/mxn-rescue";
import { Rpg } from "../rpg/rpg";
import { RpgFlops } from "../rpg/rpg-flops";
import { playerObj } from "./obj-player";
import { objIndexedSprite } from "./utils/obj-indexed-sprite";

const txs = {
    appear: Tx.Collectibles.Flop.Appear.split({ width: 12 }),

    accessory: {
        front: Tx.Collectibles.Flop.Front.split({ width: 36 }),
        rear: Tx.Collectibles.Flop.Rear.split({ width: 48 }),
    },
    body: Tx.Collectibles.Flop.Body,
    crest: Tx.Collectibles.Flop.Crest.split({ width: 48 }),
    ears: Tx.Collectibles.Flop.Ears.split({ width: 48 }),
    eyes: Tx.Collectibles.Flop.Eyes.split({ width: 34 }),
    feet: Tx.Collectibles.Flop.Feet.split({ width: 36 }),
    mouth: Tx.Collectibles.Flop.Mouth.split({ width: 28 }),
    nose: Tx.Collectibles.Flop.Nose.split({ width: 34 }),
};

export function objFlop(flopDexNumberZeroIndexed: Integer) {
    flopDexNumberZeroIndexed = cyclic(Math.round(flopDexNumberZeroIndexed), 0, 999);

    const appearObj = objIndexedSprite(txs.appear).anchored(0.5, 0.5);
    const fullyRealizedCharacterObj = objFlopCharacter.fromDexNumber(flopDexNumberZeroIndexed).invisible();

    const characterObj = container(appearObj, fullyRealizedCharacterObj)
        .filtered(fullyRealizedCharacterObj.objects.filter);

    const hitboxObj = new Graphics().beginFill(0).drawRect(-16, -20, 32, 40).invisible();

    return container(characterObj, hitboxObj)
        .mixin(mxnPhysics, { physicsRadius: 6, gravity: 0.1, physicsOffset: [0, 9] })
        .mixin(mxnCollectibleLoot)
        .mixin(mxnRescue)
        .step(self => {
            self.x = Math.max(0, Math.min(self.x, scene.level.width));
            if (self.isOnGround) {
                self.speed.x = approachLinear(self.speed.x, 0, 0.1);
            }
        })
        .coro(function* (self) {
            self.play(Sfx.Collect.FlopAppear.rate(0.9, 1.1));
            self.speed.y = -3;
            yield sleep(150);
            appearObj.textureIndex = 1;
            yield sleep(150);
            appearObj.textureIndex = 2;
            yield sleep(150);
            fullyRealizedCharacterObj.scaled(0.5, 0.5).visible = true;
            yield sleep(300);
            fullyRealizedCharacterObj.scaled(1, 1);
        })
        .coro(function* (self) {
            for (let i = 0; i < 8; i++) {
                yield sleep(150);
                characterObj.angle += 90;
            }

            objFlopDexNumber(flopDexNumberZeroIndexed).anchored(0.5, 0).at(0, 19).show(
                self,
            );

            // TODO SFX

            const newIndicatorObj = Sprite.from(Tx.Ui.NewIndicator).anchored(0.5, 0.5).at(18, 14).show(self);
            const newIndicatorVisibleObj = container().step(() =>
                newIndicatorObj.visible = !Rpg.inventory.flops.has(flopDexNumberZeroIndexed)
            ).show(self);

            yield sleepf(2);
            yield () => self.mxnCollectibleLoot.collectConditionsMet;
            self.play(Sfx.Collect.Flop.rate(0.9, 1.1));
            newIndicatorVisibleObj.destroy();
            Rpg.inventory.flops.receive(flopDexNumberZeroIndexed);
            self.physicsEnabled = false;
            self.speed.at(0, 0);
            yield interpvr(self).translate(0, -32).over(200);
            if (newIndicatorObj.visible) {
                self.play(Sfx.Collect.FlopNew.rate(0.9, 1.1));
            }
            yield interp(newIndicatorObj, "angle").steps(8).to(360).over(400);
            yield sleep(1000);

            const tune = GenerativeMusicUtils.tune4("major");
            for (let i = 0; i < 4; i++) {
                const { value: rate } = tune.next();
                if (rate) {
                    self.play(Sfx.Collect.FlopFlash.rate(rate));
                }
                self.visible = !self.visible;
                yield sleep(100);
            }
            self.destroy();
        });
}

function printFlopDexNumber(flopDexNumberZeroIndexed: Integer) {
    let result = "" + (flopDexNumberZeroIndexed + 1);
    while (result.length < 3) {
        result = "0" + result;
    }

    return "#" + result;
}

export function objFlopCharacter(seed: Integer) {
    const args = getArgsFromFlopSeed(seed);

    const filter = new MapRgbFilter(args.tint.red, args.tint.green, args.tint.blue);

    return container(
        ...(args.accessory.rear ? [Sprite.from(args.accessory.rear).at(-7, 7)] : []),
        Sprite.from(txs.body),
        Sprite.from(args.feet).at(-4, 22),
        ...(args.accessory.front ? [Sprite.from(args.accessory.front).at(-4, 14)] : []),
        ...(args.ears ? [Sprite.from(args.ears).at(-10, -24)] : []),
        Sprite.from(args.mouth).at(0, 1),
        ...(args.crest ? [Sprite.from(args.crest).at(-10, -24)] : []),
        Sprite.from(args.eyes).at(-5, -4),
        ...(args.nose ? [Sprite.from(args.nose).at(-5, -3)] : []),
    )
        .pivoted(15, 13)
        .merge({ objects: { filter }, state: { tint: args.tint } });
}

objFlopCharacter.fromDexNumber = function fromDexNumber (flopDexNumberZeroIndexed: Integer) {
    const seed = flopDexSeeds[flopDexNumberZeroIndexed];
    return objFlopCharacter(seed);
};

export function objFlopDexNumber(flopDexNumberZeroIndexed: Integer) {
    return objText.SmallDigits(printFlopDexNumber(flopDexNumberZeroIndexed));
}

const prng = new PseudoRng();

function getArgsFromFlopSeed(flopSeed: Integer) {
    const seed = flopSeed % 2 === 0
        ? (77_777_777 + flopSeed * 9_999_999)
        : (88_888_888 + flopSeed * 9_919_191);
    prng.seed = seed;

    const hue0 = getHue();
    const hueDeltaSign = prng.intp();
    const hue1 = getNextHue(hue0, hueDeltaSign);
    const hue2 = getNextHue(hue1, hueDeltaSign);

    const [hueR, hueG, hueB] = prng.shuffle([hue0, hue1, hue2]);

    const noAccessoryPossibility = prng.int(2);

    const accessory = {
        front: txs.accessory.front[prng.int(noAccessoryPossibility === 0 ? -1 : 0, txs.accessory.front.length)] ?? null,
        rear: txs.accessory.rear[prng.int(noAccessoryPossibility === 1 ? -1 : 0, txs.accessory.rear.length)] ?? null,
    };

    const tint = prng.bool()
        ? {
            red: AdjustColor.hsv(hueR, prng.intc(50, 100), prng.intc(80, 100)).toPixi(),
            green: AdjustColor.hsv(hueG, prng.intc(75, 100), prng.intc(50, 100)).toPixi(),
            blue: AdjustColor.hsv(hueB, prng.intc(75, 100), prng.intc(50, 100)).toPixi(),
        }
        : {
            red: AdjustColor.hsv(hueR, prng.intc(75, 100), prng.intc(50, 100)).toPixi(),
            green: AdjustColor.hsv(hueG, prng.intc(50, 100), prng.intc(80, 100)).toPixi(),
            blue: AdjustColor.hsv(hueB, prng.intc(50, 100), prng.intc(80, 100)).toPixi(),
        };

    return {
        accessory,
        crest: prng.item(txs.crest),
        ears: txs.ears[prng.int(-1, txs.ears.length)] ?? null,
        eyes: prng.item(txs.eyes),
        feet: prng.item(txs.feet),
        mouth: prng.item(txs.mouth),
        nose: txs.nose[prng.int(-1, txs.nose.length)] ?? null,
        tint,
    };
}

function getHue() {
    const range = prng.int(7);

    if (range < 3) {
        return prng.int(70);
    }
    if (range === 3) {
        return prng.int(70, 162);
    }
    return prng.int(162, 360);
}

function getNextHue(hue: number, deltaSign: PolarInt) {
    let min = 20;
    let max = 70;

    if (hue >= 162 && prng.bool()) {
        max += 50;
    }
    else if (hue >= 70 && hue < 162) {
        min = 50;
        max += 50;
    }

    return cyclic(hue + prng.int(min, max) * deltaSign, 0, 360);
}

const flopDexSeeds = [
    0,
    1,
    1002,
    1003,
    4,
    5,
    6,
    7,
    8,
    1004,
    10,
    1005,
    12,
    13,
    1017,
    1018,
    1023,
    17,
    18,
    1024,
    20,
    1026,
    22,
    23,
    1028,
    1034,
    1035,
    1041,
    28,
    1042,
    30,
    1043,
    32,
    33,
    34,
    35,
    36,
    1044,
    38,
    1045,
    1051,
    1053,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    1054,
    52,
    53,
    1057,
    55,
    1061,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    1062,
    1063,
    68,
    69,
    70,
    71,
    72,
    1064,
    74,
    75,
    1065,
    1066,
    78,
    79,
    1067,
    81,
    1068,
    1070,
    84,
    1072,
    1073,
    1076,
    1077,
    89,
    90,
    1078,
    92,
    1079,
    94,
    95,
    1081,
    97,
    98,
    99,
    1082,
    1083,
    102,
    103,
    104,
    105,
    1084,
    107,
    1085,
    109,
    110,
    1087,
    112,
    113,
    1093,
    115,
    116,
    117,
    118,
    1094,
    1099,
    121,
    122,
    1100,
    1102,
    1103,
    126,
    127,
    1107,
    129,
    130,
    1113,
    132,
    1114,
    134,
    1115,
    1117,
    137,
    1118,
    1119,
    1120,
    1121,
    142,
    143,
    1123,
    1129,
    1130,
    1132,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    1133,
    157,
    158,
    1134,
    1136,
    161,
    162,
    163,
    164,
    1138,
    166,
    1140,
    1141,
    1143,
    170,
    171,
    1144,
    1147,
    1151,
    175,
    176,
    177,
    1152,
    179,
    1153,
    181,
    1162,
    183,
    1164,
    1166,
    1170,
    187,
    188,
    1172,
    1175,
    1186,
    1189,
    193,
    1207,
    1218,
    1220,
    197,
    1229,
    199,
    1265,
    1272,
    1273,
    1274,
    204,
    1275,
    206,
    207,
    208,
    209,
    1276,
    211,
    212,
    213,
    214,
    215,
    216,
    1277,
    1278,
    1283,
    1290,
    1292,
    1294,
    223,
    1295,
    225,
    226,
    1296,
    1299,
    229,
    230,
    1300,
    1301,
    1311,
    1317,
    1318,
    1319,
    237,
    1328,
    1337,
    240,
    241,
    242,
    1339,
    244,
    245,
    1351,
    247,
    1353,
    1354,
    1355,
    251,
    252,
    1358,
    1360,
    255,
    256,
    1366,
    258,
    1370,
    260,
    1376,
    262,
    1381,
    264,
    265,
    1386,
    1392,
    1397,
    1398,
    1400,
    271,
    272,
    1401,
    274,
    1402,
    1407,
    277,
    278,
    279,
    1411,
    1413,
    282,
    283,
    284,
    285,
    1423,
    287,
    288,
    1427,
    1428,
    1432,
    1439,
    1440,
    294,
    295,
    296,
    1448,
    298,
    299,
    300,
    301,
    302,
    303,
    1454,
    305,
    306,
    1456,
    308,
    309,
    310,
    1467,
    1468,
    1470,
    1471,
    1472,
    316,
    1473,
    318,
    1475,
    320,
    1476,
    1479,
    323,
    1482,
    325,
    326,
    327,
    328,
    329,
    1487,
    1489,
    1490,
    1496,
    334,
    335,
    1497,
    1502,
    338,
    339,
    1503,
    1509,
    1511,
    1512,
    344,
    1513,
    1516,
    347,
    1517,
    349,
    1518,
    1519,
    352,
    353,
    354,
    355,
    356,
    1521,
    1524,
    1526,
    360,
    1529,
    1530,
    1531,
    1542,
    1543,
    1548,
    367,
    1550,
    1552,
    1562,
    371,
    372,
    373,
    374,
    375,
    1565,
    377,
    378,
    1566,
    1568,
    1585,
    1590,
    383,
    384,
    385,
    386,
    1593,
    388,
    1594,
    390,
    1597,
    1601,
    393,
    394,
    395,
    1617,
    397,
    1618,
    1619,
    1623,
    401,
    402,
    1625,
    404,
    405,
    1630,
    1634,
    408,
    409,
    410,
    411,
    412,
    413,
    1636,
    415,
    1640,
    1642,
    418,
    419,
    420,
    421,
    422,
    423,
    424,
    425,
    426,
    1644,
    1646,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    1649,
    1653,
    438,
    1668,
    1669,
    1670,
    442,
    443,
    1677,
    1693,
    446,
    1695,
    448,
    449,
    1697,
    451,
    1700,
    453,
    1705,
    1706,
    1710,
    457,
    1720,
    1727,
    1729,
    1730,
    462,
    1738,
    464,
    465,
    1749,
    1751,
    1752,
    1753,
    1754,
    1756,
    1759,
    1760,
    1762,
    1763,
    1765,
    1766,
    478,
    1767,
    1768,
    481,
    482,
    483,
    484,
    485,
    1771,
    487,
    488,
    489,
    1774,
    491,
    1775,
    493,
    1777,
    495,
    1779,
    497,
    1797,
    499,
    1801,
    1808,
    1819,
    503,
    1820,
    505,
    1821,
    507,
    508,
    509,
    510,
    511,
    1822,
    1823,
    1824,
    1825,
    1832,
    1833,
    518,
    1834,
    1841,
    521,
    522,
    523,
    524,
    525,
    526,
    1843,
    1860,
    1862,
    530,
    531,
    1863,
    533,
    1871,
    1873,
    1877,
    537,
    1881,
    1890,
    1892,
    1897,
    1910,
    1917,
    544,
    545,
    546,
    1918,
    1919,
    1922,
    1923,
    1943,
    552,
    1945,
    1946,
    1947,
    556,
    1949,
    1951,
    1965,
    560,
    561,
    1975,
    563,
    564,
    565,
    566,
    567,
    1977,
    1978,
    1980,
    1988,
    2003,
    2004,
    2016,
    2017,
    576,
    577,
    578,
    2018,
    580,
    581,
    582,
    583,
    2020,
    585,
    586,
    587,
    588,
    2023,
    2028,
    591,
    2029,
    2032,
    2033,
    595,
    596,
    597,
    2034,
    2037,
    2038,
    601,
    2039,
    603,
    2040,
    605,
    606,
    607,
    608,
    2048,
    2049,
    611,
    2050,
    613,
    2068,
    615,
    616,
    2071,
    2076,
    2080,
    2089,
    621,
    622,
    623,
    624,
    2092,
    2094,
    2097,
    628,
    629,
    630,
    2098,
    2108,
    2110,
    634,
    2111,
    2124,
    637,
    2126,
    2127,
    2131,
    2132,
    642,
    643,
    2140,
    645,
    646,
    647,
    2141,
    649,
    2142,
    651,
    2143,
    2144,
    2154,
    2157,
    656,
    2159,
    658,
    2160,
    2161,
    2162,
    2163,
    663,
    2165,
    665,
    2166,
    667,
    2169,
    2170,
    2172,
    671,
    2175,
    673,
    2178,
    2179,
    2181,
    677,
    678,
    2182,
    2183,
    2184,
    2193,
    2203,
    2211,
    2219,
    686,
    687,
    2222,
    2226,
    2227,
    691,
    692,
    693,
    694,
    695,
    696,
    697,
    2230,
    699,
    700,
    2231,
    702,
    703,
    704,
    705,
    2232,
    707,
    2233,
    709,
    2238,
    2242,
    712,
    713,
    714,
    2244,
    2250,
    717,
    718,
    719,
    720,
    721,
    2251,
    2255,
    2257,
    2261,
    726,
    2269,
    2270,
    2275,
    730,
    2280,
    732,
    2281,
    2288,
    2289,
    736,
    737,
    738,
    739,
    740,
    2293,
    742,
    2294,
    744,
    745,
    746,
    2295,
    748,
    2298,
    750,
    2304,
    752,
    753,
    754,
    755,
    756,
    2305,
    758,
    759,
    2308,
    2310,
    2315,
    763,
    2316,
    2317,
    766,
    767,
    2319,
    769,
    2321,
    2323,
    772,
    773,
    774,
    2324,
    2326,
    777,
    2333,
    2336,
    2338,
    781,
    782,
    2342,
    2343,
    2344,
    786,
    2345,
    2346,
    2347,
    2348,
    2350,
    2355,
    793,
    2361,
    795,
    2363,
    797,
    2364,
    2371,
    2373,
    801,
    2376,
    803,
    2378,
    805,
    806,
    2382,
    808,
    2383,
    810,
    2388,
    2389,
    2390,
    814,
    2391,
    2392,
    817,
    818,
    819,
    2393,
    2394,
    2396,
    2397,
    2399,
    825,
    826,
    2400,
    828,
    829,
    2401,
    2403,
    2404,
    2409,
    2414,
    2419,
    2420,
    837,
    838,
    2426,
    2431,
    2435,
    842,
    843,
    2436,
    845,
    846,
    847,
    848,
    849,
    2438,
    2439,
    2442,
    853,
    854,
    2443,
    2464,
    2465,
    858,
    2467,
    2484,
    2488,
    2489,
    2490,
    2491,
    2495,
    2498,
    867,
    868,
    869,
    2501,
    871,
    872,
    873,
    874,
    875,
    2502,
    2506,
    878,
    879,
    880,
    2507,
    882,
    883,
    2508,
    2522,
    2524,
    2529,
    888,
    889,
    890,
    891,
    892,
    893,
    2531,
    895,
    2533,
    897,
    898,
    899,
    900,
    2534,
    2535,
    903,
    904,
    905,
    906,
    907,
    908,
    2537,
    2538,
    911,
    912,
    2539,
    914,
    915,
    2540,
    2549,
    2551,
    2555,
    920,
    921,
    2558,
    2561,
    924,
    925,
    926,
    927,
    2562,
    929,
    930,
    931,
    2563,
    933,
    934,
    935,
    2564,
    937,
    938,
    2565,
    940,
    2566,
    2568,
    2571,
    2572,
    945,
    2573,
    947,
    2576,
    2577,
    2582,
    951,
    952,
    2589,
    2590,
    2593,
    2595,
    2597,
    958,
    2598,
    2599,
    961,
    2600,
    2601,
    964,
    965,
    2602,
    967,
    968,
    969,
    2603,
    2604,
    972,
    973,
    974,
    2605,
    976,
    2606,
    978,
    979,
    2611,
    2615,
    2622,
    983,
    2623,
    985,
    2626,
    987,
    2628,
    989,
    990,
    991,
    2629,
    2630,
    994,
    995,
    996,
    997,
    2646,
];
